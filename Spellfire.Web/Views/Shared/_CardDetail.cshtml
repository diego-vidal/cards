@using Spellfire.Model
@model Spellfire.Web.Models.HomeViewModel

@{
    var card = Model.SelectedCard;

    if (card == null)
    {
    <div style="padding-top: 10px;">
        <span style="color: red;">No card was found!</span>
    </div>
        return;
    }

    const int totalCards = 3919;
    var nextSequence = card.SequenceNumber >= totalCards ? 1 : card.SequenceNumber + 1;
    var previousSequence = card.SequenceNumber <= 1 ? totalCards : card.SequenceNumber - 1;

    ViewBag.Title = card.Name;
}

<div class="card-navigation">
    <div class="pull-left">
        <button data-sequence="@previousSequence" class="btn btn-small btn-primary btn-sequence">< Prev</button>
    </div>
    <div class="pull-right">
        <button data-sequence="@nextSequence" class="btn btn-small btn-primary btn-sequence">Next ></button>
    </div>
</div>

<div id="@card.SequenceNumber" class="card">

    @if (card.CardKinds.Any(x => x.KindKey == KindKey.Rule))
    {
        Html.RenderPartial("_CardRule", card);
    }
    else if (card.CardKinds.Any(x => x.KindKey == KindKey.Dungeon))
    {
        Html.RenderPartial("_CardDungeon", card);
    }
    else
    {
        Html.RenderPartial("_CardVertical", card);
    }
    @{ Html.RenderPartial("_CardFooter", card); }
</div>


@if (Request.IsLocal)
{
    <table class="table table-striped table-bordered details">
        <tr>
            <td>Types</td>
            <td>@card.KindsCsv</td>
        </tr>
        <tr>
            <td>Attributes</td>
            <td>@card.AttributesCsv</td>
        </tr>
        <tr>
            <td>Phases</td>
            <td>@card.PhasesCsv</td>
        </tr>
    </table>
}

